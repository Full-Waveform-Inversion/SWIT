###############################################################################
# SWIT v1.1: Seismic Waveform Inversion Toolbox
#
# Description: This is a configuration file in YAML format for SWIT-1.1.
#              It is used to configure the workflow of SWIT-1.1.
#   Note: 
#              Workflow: define the overall workflow of SWIT-1.1. 
#              System: define working directory and system parameters
#              Model: define the model used in wavefield simulation
#              Receiver: define the receiver locations and components
#              Source: define the source locations and wavelet
#              Optimizer: define the optimizer in FWI (only effective for FWI job)
#              Preprocessor: define the data preprocessor (effective for both FWI and RTM jobs)
#   Any illegal parameters will cause SWIT-1.1 to exit with error explanation.
# 
###############################################################################

# Define the overall workflow of SWIT-1.1
Workflow:
  
  job_workflow: #job workflow including FORWARD, FWI, RTM, or any combination of them, defined as a list as shown below
      - FORWARD
      - FWI
      - RTM
  simu_tag: obs     # str, only effective for FORWARD job, simulation tag such as obs, syn, or any other tag you want to use 
  save_sanp: false  # str, effective for FORWARD job, save snapshot or not

# Define the system parameters
System:
  path: /scr2/haipeng/fwi/                            # str, working directory
  mpi_cpu_num: 21                                     # int, maximum number of CPU cores used in MPI for lunching the wavefield solver
  max_cpu_num: 40                                     # int, maximum number of CPU cores available on the machine
  fig_aspect:  1.0                                    # float, aspect ratio of the figure, sometimes it is useful to adjust the aspect ratio of the figure

# Define the model size and model files
Model:
  nx: 481                                             # int, number of grid points in x direction
  nz: 121                                             # int, number of grid points in z direction
  dx: 25                                              # float, grid spacing in x and z directions (in meter)
  nt: 4001                                            # int, number of time steps
  dt: 0.002                                           # float, time step (in second)
  pml: 40                                             # int, number of PML grid points on each side. Set a large number because the PML performs not so well
  vp_file:  /path/to/vp_true                          # str, path to the true velocity file that can be a *npy, *bin, *dat, or *txt file. The true velocity model is a 2-D array with shape (nx, nz) in m/s, and is only used for FORWARD job for calculating the true data
  rho_file: /path/to/rho_true                         # str, path to the true density file that can be a *npy, *bin, *dat, or *txt file.   The true density model is a 2-D array with shape (nx, nz) in kg/m^3 and is only used for FORWARD job for calculating the true data

# Define the receiver coordinates and components
Receiver:
  rec_comp: vz    # str, receiver component, can be vz, vx, or p. For the land acquisition, oftentimes  the waveform data in the vz component recorded by geophone is used, though vx data can be used when available. 
                  # For the marine acquisition, oftentimes the waveform data in the p component (pressure recorded by hydrophone) is used. 
  rec_coord_file: /path/to/rec_coord.npz   # str, path to the receiver coordinate file. Note the *npz file is used here instead of *npy file. The receiver coordinate file contains a list of 2D arrays, each of which is the coordinate file for one shot. 
                                          # The receiver for each shot is defined by a 2D array with shape (nrec, 2), where nrec is the number of receivers and the first column is the x coordinate of the receiver, 
                                          # and the second column is the z coordinate of the receiver. The receiver coordinate file is used for FORWARD, FWI, and RTM jobs. 

# Define the source coordinates and wavelet
Source:
  amp0: 1.0    # float, amplitude of the source wavelet
  f0: 5.0      # float, dominant frequency of the source wavelet
  src_type: file  # str, source type, can be "file" or "ricker". If src_type is set as "file", the source wavelet is read from the file specified by wavelet_file below. If src_type is ricker, the source wavelet is generated by the Ricker wavelet with the dominant frequency specified by f0.
  src_coord_file: /path/to/src_coord.npy    # str, path to the source coordinate file (*npy file). The source coordinate is a 2-D array with shape (nsrc, 2), where nsrc is the number of sources and the first column is the x coordinate of the source, 
                                             # and the second column is the z coordinate of the source. The source coordinate file is used for FORWARD, FWI, and RTM jobs.
  wavelet_file:   /path/to/wavelets.npy     # str, Path to the source wavelet file (*npy file). The source wavelet is a 2-D array with shape (nsrc, nt), where nsrc is the number of sources and nt is the number of time steps. 
                                             # The source wavelet file is used for FORWARD, FWI, and RTM jobs. Only useful when src_type is set as "file". 

# Define the optimizer in FWI
Optimizer:
  vp_init_file:   /path/to/vp_init.npy    # str, path to the initial velocity model file (*npy file). The initial velocity model is a 2-D array with shape (nx, nz) in m/s. The initial velocity model file is used for FWI or RTM job.
  rho_init_file:  /path/to/rho_init.npy   # str, path to the initial density model file (*npy file). The initial density model is a 2-D array with shape (nx, nz) in kg/m^3. The initial density model file is used for FWI or RTM job. 
  grad_mask_file: /path/to/grad_mask.npy  # str, path to the gradient mask file (*npy file). The gradient mask is a 2-D array with shape (nx, nz) with value 1 or 0. If the value is 0, the gradient in corresponding grid point is set to 0 and does not contribute to update of the velocity model.
                                          # If left as empty, default gradient damping masking is applied, which is useful for land acquisition.

  misfit_type: waveform                   # str, misfit type, can be: waveform, envelope, traveltime, globalcorrelation
  method: CG                              # str, optimization method, can be: SD, CG, BFGS, PLBFGS, TRN and PTRN, which correspond to the Steepest Descent, Conjugate Gradient, L-BFGS, Preconditioned L-BFGS, Truncated Newton, and Preconditioned Truncated Newton methods, respectively.
  niter_max: 20                           # int, maximum number of iterations
  bound: true                             # bool, whether to apply bound constraint on the velocity model
  vp_min: 1000                            # float, minimum velocity bound constrain in m/s. Only useful when bound is set as true.
  vp_max: 5000                            # float, maximum velocity bound constrain  in m/s. Only useful when bound is set as true.
  grad_smooth_size: 0                     # int, size of the smoothing window for the gradient. If set as 0, no smoothing is applied.
  update_vpmax: 50                        # float, maximum update of the velocity model in m/s. This is used to control the step size of the velocity model update.
  debug: false                            # bool, whether to output the iteration information

# Define the data preprocessor for FWI and RTM
Preprocessor:
  filer: none                             # str, filter type, can be: none, bandpass , lowpass, highpass.
  filter_high: 10.0                       # float, high frequency of the bandpass filter in Hz. 
  filter_low: 5.0                         # float, low frequency of the bandpass filter in Hz.
  mute_near_offset: false                 # bool, whether to mute the near offset data
  mute_near_distance: 500                 # float, distance of the near offset mute in m. Only useful when mute_near_offset is set as true.
  mute_far_offset: false                  # bool, whether to mute the far offset data
  mute_far_distance: 8000                 # float, distance of the far offset mute in m. Only useful when mute_far_offset is set as true.
  mute_late_arrival: false                # bool, whether to mute the late arrival data and only keep the early arrival data
  mute_late_size: 0.5                     # float, size of the late arrival mute in s. Only useful when mute_late_arrival is set as true.
  normalize_data: false                   # bool, whether to normalize the data by the maximum amplitude of the data in a trace-by-trace manner
